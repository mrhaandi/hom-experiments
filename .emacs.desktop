;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Fri Dec 13 12:05:50 2024
;; Desktop file format version 208
;; Emacs version 29.4

;; Global section:
(setq desktop-saved-frameset [frameset 1 (26460 5390 941629 735000) (desktop . "208") "alx@czeremcha" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font . "-ADBO-Source Code Pro-regular-normal-normal-*-13-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 0) (child-frame-border-width) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars . right) (horizontal-scroll-bars) (foreground-color . "black") (background-color . "white") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 1) (tab-bar-lines . 0) (tool-bar-lines . 1) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 16) (scroll-bar-height . 16) (alpha) (alpha-background) (no-focus-on-map) (no-accept-focus) (fullscreen) (visibility . t) (use-frame-synchronization) (skip-taskbar) (z-group) (display-type . color) (background-mode . light) (cursor-color . "black") (font-parameter) (sticky) (shaded) (environment) (dnd-root-window-position) (last-focus-update . t) (frameset--id . "197F-75B4-68C7-C5A5") (frameset--mini t . t) (modeline . t) (unsplittable) (icon-name) (display . ":0.0") (explicit-name) (height . 36) (width . 80) (left . 2117) (top . 500)) ((min-height . 12) (min-width . 10) (min-height-ignore . 6) (min-width-ignore . 6) (min-height-safe . 3) (min-width-safe . 2) (min-pixel-height . 204) (min-pixel-width . 80) (min-pixel-height-ignore . 102) (min-pixel-width-ignore . 48) (min-pixel-height-safe . 51) (min-pixel-width-safe . 16)) vc (pixel-width . 672) (pixel-height . 595) (total-width . 84) (total-height . 35) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 672) (pixel-height . 289) (total-width . 84) (total-height . 17) (normal-height . 0.5) (normal-width . 1.0) (buffer "lambda.v" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 7705) (start . 7576)) (prev-buffers ("*Proof General Welcome*" 1 1))) (leaf (pixel-width . 672) (pixel-height . 221) (total-width . 84) (total-height . 13) (normal-height . 0.36680672268907566) (normal-width . 1.0) (buffer "*goals*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated . t) (point . 1) (start . 1)) (prev-buffers ("lambda.v" 16279 357))) (leaf (last . t) (pixel-width . 672) (pixel-height . 85) (total-width . 84) (total-height . 5) (normal-height . 0.13319327731092434) (normal-width . 1.0) (buffer "*response*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 2 t nil 0 t nil) (vscroll . 0) (dedicated . t) (point . 1) (start . 1)) (prev-buffers ("*goals*" 1 1)))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '(#("Arens" 0 5 (isearch-case-fold-search nil isearch-regexp-function nil)) #("solve" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("odd" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("even" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("Odd" 0 3 (isearch-case-fold-search nil isearch-regexp-function nil)) #("list nat" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("positions" 0 9 (isearch-case-fold-search t isearch-regexp-function nil)) #("position" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("i" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("subtree" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("lk the" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("tk th" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("game_t" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("skip" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("???" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("get_dep" 0 7 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring nil)
(setq register-alist (list (desktop-list* 49 (let ((mk (make-marker))) (add-hook 'desktop-delay-hook (lambda nil (set-marker mk 3548 (get-buffer "lambda.v")))) mk))))
(setq file-name-history '("~/Praca/Projekty/HOMformal/hom-experiments/lambda.v"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/alx/Praca/Projekty/HOMformal/hom-experiments/lambda.v"
  "lambda.v"
  'coq-mode
  '(holes-mode font-lock-mode)
  7705
  '(10475 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 26460 5389 206203 765000) (buffer-file-coding-system . utf-8-unix))
  '((mark-ring (10217 10223 10495 10475 10223 10184 8302 8301 8302 5127 8430 8307 8307 8307 8293 7705))))

